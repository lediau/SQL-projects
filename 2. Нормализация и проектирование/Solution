Пункт 1:

Нормализованная таблица до нормальной формы Бойса-Кодда выглядит так: https://docs.google.com/spreadsheets/d/1-QyJzSSLLuXEEPAEa2wJaltnoppbx0PIruq9-hQX2kQ/edit?usp=sharing

Объяснения: Граф функциональных зависимостей такой (см. прикреп. файл).

Давайте формально докажем, что наша таблица имеет искомый вид:

Атомарность очевидна.

Какие есть неприводимые зависимости:

i. Таблица Клиенты: зависимость от Клиент неприводимая, а он и только он может быть ключом.

ii. Таблица Договоры: также все ок, так как ключом может быть пара (Клиент, № договора), а только № договора нет, так как там есть пустые значения.

iii. Таблица Оплата: все так же.

А нетранзитивные зависимости:

i. Такие зависимости разделены по разным табличкам, значит все ок. А какие бывают зависимости? Только № договора – (сумма договора; аванс, оплаты) – статус договора.

Все условия выполнены, значит мы правильно привели таблицу к нормальной форме Бойса-Кодда.

 бд2.drawio.pdf

 ====

 Пункт 2:

Проблемы:

Chris Evans & Chris Evans -- разные актеры с одинаковыми именами. Отсюда сделаем вывод, что в таблице Cast лучше lastName и firstName заменить на некоторый actor_id, т.е. у каждого актера будет свое Id, чтобы подобных проблем не возникало при хранении. Не забываем, что ссылки должны быть уникальными, следовательно, и в Movie_Cast заменяем соотв. поля на actor_id.

Bad Boys (1983) and Bad Boys (1995) -- аналогично, разные фильмы с одинаковыми названиями. Поступаем аналогично, заменяем на movie_id. В Movie_Cast также, поскольку ссылка есть.

Проблема другого типа: Movie_Cast все-таки является many-to-many, значит, лучше убрать (PK).

===

Пункт 3:

Окончательная версия схемы базы данных такая: https://dbdiagram.io/d/634577e0f0018a1c5fde078b

Объяснения:

Последняя модификация простая: просто добавляем в Movie поле про фактическую дату выхода.

Исправим хитро, см. 2

Тут приходится завести Enum из участников съемочного процесса: actor, director, producer, scenarist.

С этим пунктом сложнее все; приходится сохранять данные пользователей, а также историю их просмотра. Делаем это так: новая таблица Users, где будем хранить пользователей, а также many-to-many таблицу History, для хранения фильмов, просмотренных каждым пользователем.
